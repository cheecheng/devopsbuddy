package com.cheecheng.devopsbuddy.backend.persistence.domain.backend;

import com.cheecheng.devopsbuddy.enums.RolesEnum;

import javax.persistence.*;
import java.util.*;

/**
 * See comment on User.java
 */
@Entity
public class Role {

    @Id
    private int id;

    private String name;

    /* Role is owned by User */
    //@ManyToMany(mappedBy = "roles")
    //private Set<User> users = new HashSet<>();

    // high-performance-java-persistence.pdf, p. 219
    //@OneToMany(mappedBy = "role", cascade = CascadeType.ALL, orphanRemoval = true)
    //private Set<UserRole> users = new HashSet<>();

    // high-performance-java-persistence.pdf, p. 219 doesn't work, follow what's on video.

    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<UserRole> userRoles = new HashSet<>();

    public Role() {
    }

    /**
     * Full constructor.
     *
     * @param rolesEnum
     */
    public Role(RolesEnum rolesEnum) {
        this.id = rolesEnum.getId();
        this.name = rolesEnum.getRoleName();
    }

    public Set<UserRole> getUserRoles() {
        return userRoles;
    }

    public void setUserRoles(Set<UserRole> userRoles) {
        this.userRoles = userRoles;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Role role = (Role) o;
        return id == role.id;
    }

    @Override
    public int hashCode() {

        return Objects.hash(id);
    }
}
/*
Hibernate:
    drop table plan if exists
Hibernate:
    drop table role if exists
Hibernate:
    drop table user if exists
Hibernate:
    drop table user_roles if exists
Hibernate:
    create table plan (
        id integer not null,
        name varchar(255),
        primary key (id)
    )
Hibernate:
    create table role (
        id integer not null,
        name varchar(255),
        primary key (id)
    )
Hibernate:
    create table user (
        id bigint generated by default as identity,
        country varchar(255),
        description varchar(500),
        email varchar(255),
        enabled boolean not null,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255),
        phone_number varchar(255),
        profile_image_url varchar(255),
        stripe_customer_id varchar(255),
        username varchar(255),
        plan_id integer,
        primary key (id)
    )
Hibernate:
    create table user_roles (
        users_id bigint not null,
        roles_id integer not null,
        primary key (users_id, roles_id)
    )
Hibernate:
    alter table user
        add constraint FKeos0c7nc1mvicjcxbkxxolohc
        foreign key (plan_id)
        references plan
Hibernate:
    alter table user_roles
        add constraint FKj9553ass9uctjrmh0gkqsmv0d
        foreign key (roles_id)
        references role
Hibernate:
    alter table user_roles
        add constraint FK7ecyobaa59vxkxckg6t355l86
        foreign key (users_id)
        references user
 */