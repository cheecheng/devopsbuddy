package com.cheecheng.devopsbuddy.backend.persistence.domain.backend;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * This is difference from the video. In video, it creates the intermediary UserRole table, around time 10:15.
 *
 * @Entity
 * @Table(name = "user_role")
 * public class UserRole {
 *     @Id
 *     @ManyToOne(fetch = FetchType.EAGER)
 *     @JoinColumn(name = "user_id")
 *     private User user;
 *
 *     @Id
 *     @ManyToOne(fetch = FetchType.EAGER)
 *     @JoinColumn(name = "role_id")
 *     private Role role;
 * }
 *
 * But here I don't create this table, I follow
 * page 64 of "Hibernate Tips - More than 70 solutions to common Hibernate problems.pdf"
 * https://vladmihalcea.com/2017/05/10/the-best-way-to-use-the-manytomany-annotation-with-jpa-and-hibernate/
 *
 * and let Hibernate generates the intermediary table.
 *
 * ** BUT **
 * According to high-performance-java-persistence.pdf, p. 219,
 * The most efficient JPA relationships are the ones where the foreign key side is controlled by a
 * child-side @ManyToOne or @OneToOne association. For this reason, the many-to-many table relationship is
 * best mapped with two bidirectional @OneToMany associations. The entity removal and the element order changes are
 * more efficient than the default @ManyToMany relationship and the junction entity can also map additional columns
 * (e.g. created_on, created_by).
 *
 * So, it's better to manually create the intermediary table entity, like the video.
 * See the following for more information,
 * high-performance-java-persistence.pdf,
 * p. 213, 10.5.2 Bidirectional @ManyToMany
 * p. 215, 10.5.3 The @OneToMany alternative
 */
@Entity
public class Role {

    // Don't forget no-arg constructor

    @Id
    private int id;

    private String name;

    /* Role is owned by User */
    @ManyToMany(mappedBy = "roles")
    private Set<User> users = new HashSet<>();

    public Set<User> getUsers() {
        return users;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Role role = (Role) o;
        return id == role.id;
    }

    @Override
    public int hashCode() {

        return Objects.hash(id);
    }
}
/*
Hibernate:
    drop table plan if exists
Hibernate:
    drop table role if exists
Hibernate:
    drop table user if exists
Hibernate:
    drop table user_roles if exists
Hibernate:
    create table plan (
        id integer not null,
        name varchar(255),
        primary key (id)
    )
Hibernate:
    create table role (
        id integer not null,
        name varchar(255),
        primary key (id)
    )
Hibernate:
    create table user (
        id bigint generated by default as identity,
        country varchar(255),
        description varchar(500),
        email varchar(255),
        enabled boolean not null,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255),
        phone_number varchar(255),
        profile_image_url varchar(255),
        stripe_customer_id varchar(255),
        username varchar(255),
        plan_id integer,
        primary key (id)
    )
Hibernate:
    create table user_roles (
        users_id bigint not null,
        roles_id integer not null,
        primary key (users_id, roles_id)
    )
Hibernate:
    alter table user
        add constraint FKeos0c7nc1mvicjcxbkxxolohc
        foreign key (plan_id)
        references plan
Hibernate:
    alter table user_roles
        add constraint FKj9553ass9uctjrmh0gkqsmv0d
        foreign key (roles_id)
        references role
Hibernate:
    alter table user_roles
        add constraint FK7ecyobaa59vxkxckg6t355l86
        foreign key (users_id)
        references user
 */